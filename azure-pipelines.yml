# Azure DevOps CI/CD Pipeline for Docker Application
# File: azure-pipelines.yml

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  # Docker Registry Configuration
  dockerRegistryServiceConnection: 'your-acr-service-connection'
  imageRepository: 'your-app-name'
  containerRegistry: 'yourregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Azure Configuration
  azureSubscription: 'your-azure-subscription'
  resourceGroup: 'your-resource-group'
  webAppName: 'your-webapp-name'
  
  # Build Agent
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build Job
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Docker Image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Docker Image to ACR
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Optional: Run security scanning
    - task: Docker@2
      displayName: Scan Docker Image
      inputs:
        command: 'scan'
        arguments: '$(containerRegistry)/$(imageRepository):$(tag)'
      continueOnError: true

    # Optional: Run tests in container
    - script: |
        docker run --rm $(containerRegistry)/$(imageRepository):$(tag) npm test
      displayName: 'Run Tests in Container'
      continueOnError: true

- stage: DeployDev
  displayName: Deploy to Development
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to Dev Environment
    pool:
      vmImage: $(vmImageName)
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App for Containers'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: '$(webAppName)-dev'
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'

- stage: DeployProd
  displayName: Deploy to Production
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to Production
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            displayName: 'Deploy to Azure Web App for Containers'
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
          
          - task: AzureAppServiceManage@0
            displayName: 'Restart Azure App Service'
            inputs:
              azureSubscription: $(azureSubscription)
              Action: 'Restart Azure App Service'
              WebAppName: $(webAppName)